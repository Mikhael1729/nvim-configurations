# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet rts "React TypeScript with MUI Styles" b
import { Theme, makeStyles } from "@material-ui/core/styles";

const useStyles = makeStyles((theme: Theme) => ({
  $1
}));
endsnippet

snippet ti "create interface" b
interface $1 {
}
endsnippet

snippet rtcni "React TypeScript constant component without interface" b
import React, { FC } from "react";

const $1: FC = () => {
  return (
    <>
      $2
    </>
  );
};

export default ${1};
endsnippet

snippet rtcnis "React TypeScript Constant with No Interface and with Styles"
import React, { FC } from "react";
import { createStyles, Theme, makeStyles } from "@material-ui/core/styles";

const $1: FC = () => {
  const classes = useStyles();

  return (
    <div>
      $2
    </div>
  );
};

const useStyles = makeStyles((theme: Theme) => 
  createStyles({})
);

export default $1;
endsnippet

snippet rtcs "React TypeScript constant component with MUI styles" b
import { makeStyles } from "@material-ui/core/styles";
import React, { FC } from "react";

interface ${1}Props {}

const ${1}: FC<${1}Props> = (props) => {
  const classes = useStyles();

  return (
    <div>
      $2
    </div>
	);
};

const useStyles = makeStyles({});

export default ${1};
endsnippet

snippet rtc "React TypeScript constant component" b
import React, { FC } from "react";

interface ${1}Props {}

const Rols: FC<${1}Props> = (props) => {
  return (
    <div>
      $2
    </div>
	);
};

export default ${1};
endsnippet

snippet rtf "React TypeScript constant component" b
import React, { FC } from "react";

interface ${1}Props {}

export default function Rols(${1}Props) => {
  return (
    <div>
      $2
    </div>
	);
}
endsnippet

snippet rtfs "React TypeScript constant component" b
import { makeStyles } from "@material-ui/core/styles";
import React, { FC } from "react";

interface ${1}Props {}

export default function Rols(${1}Props) => {
  const classes = useStyles();

  return (
    <div>
      $2
    </div>
	);
}

const useStyles = makeStyles({});
endsnippet

snippet ec "Export component" b
import ${1} from "./${1}";

export { ${1} };
export default $1;
endsnippet

snippet pcs "Functional component with MUI styles" b
import { createStyles, makeStyles } from "@material-ui/styles";
import { FunctionalComponent, h } from "preact";

export interface $1Props {
  name: TimeMeasureType;
}

const useStyles = makeStyles(
  createStyles({
    container: {},
  })
);

const $1: FunctionalComponent<$1Props> = () => {
  const classes = useStyles();

  return (
    <div className={classes.container}>
      $2
    </div>
  );
};

export default $1;
endsnippet

snippet rtng "React NextJS Props"
import { NextPage } from "next";

interface $1Props {}

const $1: NextPage<$1Props> = (props) => {
  return (
    <div>
      $2
    </div>
  );
};

$1.getInitialProps = async({ req }) => {}

export default $1;
endsnippet


snippet rtn "React NextJS Props"
import { NextPage } from "next";

const $1: NextPage = () => {
  return (
    <div>
      $2
    </div>
  );
};

export default $1;
endsnippet

snippet rtns "React NextJS Props"
import { makeStyles } from "@material-ui/core/styles";
import { NextPage } from "next";

const $1: NextPage = () => {
  const classes = useStyles();

  return (
    <div>
      $2
    </div>
  );
};

const useStyles = makeStyles((theme) => ({}));

export default $1;
endsnippet
