# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet in "create interface" b
interface $1 {
}
endsnippet

snippet cfc "const FunctionalComponent: FC<any> = () => {}" b
import React, { FC } from "react";

interface ${1}Props { 
}

const $1: FC<${1}Props> = (props) => {
	const { children } = props;

	return (
		<>
			$2
		</>
	);
}

export default ${1}
endsnippet

snippet cfcni "Functional component without interface" b
import React, { FC } from "react";

const $1: FC<any> = (props) => {
	const { children } = props;

	return (
		<>
			$2
		</>
	);
}

export default ${1}
endsnippet

snippet cfcws "Functional component with MUI styles" b
import React, { FC } from "react";
import { makeStyles, Theme } from "@material-ui/core/styles";

const useStyles = makeStyles((theme: Theme) => ({
}))

interface ${1}Props { 
}

const $1: FC<${1}Props> = (props) => {
	const { children } = props;
	const classes = useStyles();

	return (
		<>
			$2
		</>
	);
}

export default ${1}
endsnippet

snippet ec "Export component" b
import ${1} from "./${1}";

export { ${1} };
export default $1;
endsnippet
