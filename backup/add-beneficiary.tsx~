import React, { FC, useState } from "react";
import {TextField, FormControl, InputLabel, Select, MenuItem, Button, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, useMediaQuery, useTheme } from "@material-ui/core";
import { createStyles, makeStyles, Theme } from "@material-ui/core/styles";
import Beneficiary from "models/beneficiary";

const useStyles = makeStyles((theme: Theme) =>
  createStyles({
    formControl: {
      marginBottom: theme.spacing(2),
      minWidth: 120,
    },
    content: {
      display: "flex",
      flexDirection: "column",
    }
  }),
);

export interface IAddBeneficiaryProps {
  open: boolean;
  onClose: (beneficiary?: Beneficiary) => void;
}

const AddBeneficiary: FC<IAddBeneficiaryProps> = ({ open, onClose }) => {
  const banks = ['Nombre del Banco 1', 'Nombre del Banco 2'];
  const classes = useStyles();

  const [name, setName] = useState("");
  const [accountNumber, setAccountNumber] = useState("");
  const [selectedBank, setSelectedBank] = useState("");

  const onBankChange = (event: React.ChangeEvent<{ value: unknown }>) => {
    const bankName = event.target.value as string;
    setSelectedBank(bankName);
  };

  function handleClose(beneficiary?: Beneficiary) {
    if(beneficiary)
      onClose(beneficiary);
    else
      onClose();
  }

  const theme = useTheme();
  const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));

  return (
    <>
      <Dialog
        fullScreen={fullScreen}
        open={open}
        onClose={() => handleClose()}
        aria-labelledby="form-dialog-title"
      >
        <DialogTitle id="form-dialog-title">Agregar Beneficiario</DialogTitle>
        <DialogContent className={classes.content}>
          <DialogContentText>
            Llena el siguiente formluari para registrar un beneficiario
          </DialogContentText>

          <br />

          <FormControl variant="outlined" className={classes.formControl}>
            <TextField
              id="outlined-helperText"
              label="Nombre del beneficiario"
              value={name}
              onChange={event => setName(event.target.value)}
              defaultValue=""
              InputLabelProps={{
                shrink: true,
              }}
              helperText=""
              variant="outlined"
            />
          </FormControl>
          <FormControl variant="outlined" className={classes.formControl}>
            <TextField
              id="outlined-helperText"
              label="Número de cuenta"
              value={accountNumber}
              onChange={event => setAccountNumber(event.target.value)}
              defaultValue=""
              InputLabelProps={{
                shrink: true,
              }}
              helperText="Número de cuenta del beneficiario"
              variant="outlined"
            />
          </FormControl>
          <FormControl variant="outlined" className={classes.formControl}>
            <InputLabel id="demo-simple-select-outlined-label">
              Seleccionar banco
            </InputLabel>
            <Select
              labelId="demo-simple-select-outlined-label"
              id="demo-simple-select-outlined"
              value={selectedBank}
              onChange={onBankChange}
              label="Age"
            >
              {banks.map((bank: string, index: number) => (
                <MenuItem key={index} value={bank}>
                  {bank}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => handleClose()} color="primary">
            Cancelar
          </Button>
          <Button
            onClick={() =>
              handleClose(
                new Beneficiary({ name, bankName: selectedBank, accountNumber })
              )
            }
            color="primary"
          >
            Guardar beneficiario
          </Button>
        </DialogActions>
      </Dialog>
    </>
  )
}

export default AddBeneficiary;
