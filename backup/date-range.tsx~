import "date-fns";
import React, {  useEffect } from "react";
import { makeStyles, createStyles, Theme } from "@material-ui/core/styles";
import { Typography } from "@material-ui/core";
import { MuiPickersUtilsProvider, KeyboardDatePicker } from "@material-ui/pickers";
import DateFnsUtils from "@date-io/date-fns"

const useStyles = makeStyles((theme: Theme) =>
  createStyles({
    dateSection: {
      display: "flex",
      flexDirection: "row",
      alignItems: "center",
      flexGrow: 1,
      [theme.breakpoints.down("xs")]: {
        alignItems: "flex-start",
        flexDirection: "column",
      },
    },
    date: {
      marginRight: 15,
      fontWeight: "bold",
    },
    date1: {
      padding: 0,
      margin: 0,
      border: "none",
    },
    date2: {
      padding: 0,
      margin: 0,
      border: "none",
    },
    dateTitle: {
      fontWeight: "bold",
      [theme.breakpoints.up("xs")]: {
        marginRight: 15
      },
      [theme.breakpoints.down("xs")]: {
        marginBottom: 5
      }
    },
    and: {
      fontWeight: "bold",
      [theme.breakpoints.up("xs")]: {
        marginLeft: 15,
        marginRight: 15,
      },
      [theme.breakpoints.down("xs")]: {
        marginBottom: 5,
        marginTop: 5,
        marginLeft: 0,
        marginRight: 0
      }
    },
  })
)

interface IDateRangeProps<T> {
  filterData: (data: T[]) => void;
  dateProperty: keyof T;
  data: T[];
  onDateChange: (startDate: Date, endDate: Date) => void;
}

function DateRange<T>({ data, filterData, dateProperty, onDateChange }: IDateRangeProps<T>) {
  // Styles.
  const classes = useStyles();

  // Data.
  const currentDate = new Date(Date.now());
  const currentStartDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
  const currentEndDate = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);


  // Methods.
  const filterDataAfterDateChange = ((callback: (date: Date) => void) => (date: Date | null) => {
    if(date)
      callback(date);
  });

  useEffect(() => {
    const filteredData = data.filter((element: T) => {
      const evaluatingDate = (element[dateProperty] as unknown) as Date;
      const dateIsInTheRange = evaluatingDate >= startDate && evaluatingDate <= endDate;
      return dateIsInTheRange;
    });

    filterData(filteredData);
    onDateChange(startDate, endDate);
  }, [startDate, endDate])

  return (
    <div className={classes.dateSection}>
      <Typography variant="subtitle1" className={classes.dateTitle}>
        Movimientos entre
      </Typography>
      <MuiPickersUtilsProvider utils={DateFnsUtils}>
        <KeyboardDatePicker
          className={classes.date1}
          disableToolbar
          variant="inline"
          format="dd/MM/yyyy"
          margin="normal"
          id="date-picker-inline"
          value={startDate}
          onChange={filterDataAfterDateChange(setStartDate)}
          KeyboardButtonProps={{
            "aria-label": "change date",
          }}
        />
      </MuiPickersUtilsProvider>
      <Typography variant="subtitle1" className={classes.and}>
        y
      </Typography>
      <MuiPickersUtilsProvider utils={DateFnsUtils}>
        <KeyboardDatePicker
          className={classes.date2}
          disableToolbar
          variant="inline"
          format="dd/MM/yyyy"
          margin="normal"
          id="date-picker-inline"
          value={endDate}
          onChange={filterDataAfterDateChange(setEndDate)}
          KeyboardButtonProps={{
            "aria-label": "change date",
          }}
        />
      </MuiPickersUtilsProvider>
    </div>
  )
}

export default DateRange;
