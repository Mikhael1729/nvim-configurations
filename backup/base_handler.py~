import glob
import os
import re

from helpers.string_helper import StringHelper
from models.trimester import Trimester


class BaseHandler:
  class __BaseHandler:
    @property
    def base_url(self):
      return self._base_url

    @property
    def last_period_url(self):
      return os.path.join(
        self.base_url, 
        Trimester.identifier + str(self.last_trimester_number)
      )

    @property
    def trimesters(self):
      return self._trimesters

    @property
    def last_trimester_number(self):
      return self._last_trimester_number

    def __init__(self):
      # Get directories of the current path
      base_url = os.getcwd()
      listdir = os.listdir(base_url)

      # Get the last trimester directory
      trimesters = list(filter(BaseHandler.__BaseHandler.only_trimesters, listdir))
      StringHelper.sort_alphanumerically(trimesters)

      quantity = len(trimesters)
      last = int(trimesters[quantity - 1][1:]) if quantity > 0 else 0

      # Initialize values
      self._base_url = base_url
      self._trimesters = trimesters
      self._last_trimester_number = last

    @staticmethod
    def only_trimesters(directory):
      regex = re.compile('T[1-9]+')
      if regex.match(directory):
        return True
      else:
        return False

    def get_subject_directory(self, code):
      # Get subject in subject directory.
      query = code

      possible_elements = glob.glob(
        os.path.join(
          self.last_period_url,
          f'{query}_*')
      )
      selected_element = next((s for s in possible_elements), None)

      return selected_element

    def get_directories(
      self,
      subject_directory,
      identifier,
      identifier_name
    ):
      elements_directory = os.path.join(
        subject_directory, 
        identifier_name
      )

      all_elements = glob.glob(
        os.path.join(elements_directory, identifier + '*')
      )
      StringHelper.sort_alphanumerically(all_elements)

      return (elements_directory, all_elements)

  _instance = None

  @staticmethod
  def instance():
    if not BaseHandler._instance:
      BaseHandler._instance = BaseHandler.__BaseHandler()

    return BaseHandler._instance

  def __init__(self):
    pass
