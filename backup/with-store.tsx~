import React, { FC, ComponentType, ReactType } from "react";
import { DorabankState, useDorabankState, SetDorabankState } from "../store";
import ScreenComponent from "models/screen-component";

// T: IProps
// U: ReturnType<typeof mapStateToProps>
// V: T & U

function withStore<T, U>(
  mapStateToProps: (state: DorabankState, setState: SetDorabankState, ownProps: T) => U,
  Component: ComponentType<T & U>
): ReactType<T> {

  const Wrapped: FC<any> = (props) => {
    const [state, setState] = useDorabankState()
    const stateProps = mapStateToProps(state, setState, props);

    return <Component {...stateProps} {...props} />
  }

  const WithInterface: FC<T> = (props) => <Wrapped {...props}/>

  return WithInterface;
}

// T: IComponentProps.
// U: ReturnType<typeof mapStateToProps>
// V: ReturnType<typeof mapDispatchToProps>

export function connectToStore<T>(
  mapStateToProps: ((state: DorabankState, ownProps: T) => {}) | null = null,
  mapDispatchToProps: ((setState: SetDorabankState, ownProps: T) => {}) | null = null
): (Component: ComponentType<any>) => FC<T> {
  return (Component: ComponentType<any>) => {
    const Wrapped: FC<any> = (props) => {
      const [state, setState] = useDorabankState()
      const stateProps = mapStateToProps ? mapStateToProps(state, props) : {};
      const dispatchProps = mapDispatchToProps ? mapDispatchToProps(setState, props) : {};

      return <Component {...stateProps} {...dispatchProps} {...props} />
    }

    function WithInterface(props: any) { return <Wrapped {...props}/>; }

    // Copy possible static variables.
    if(Object.keys(Component).length) {
      Object.keys(Component).forEach((key: string) => {
        (WithInterface as any)[key] = (Component as any)[key];
      })
    }

    return WithInterface;
  }
}

export function screenWithStore<T>(
  mapStateToProps: ((state: DorabankState, ownProps: T) => {}) | null = null,
  mapDispatchToProps: ((setState: SetDorabankState, ownProps: T) => {}) | null = null
): (Component: FC<any>) => ScreenComponent<T> {
  return (Component: FC<any>) => {
    const Wrapped: any = (props: any) => {
      const [state, setState] = useDorabankState()
      const stateProps = mapStateToProps ? mapStateToProps(state, props) : {};
      const dispatchProps = mapDispatchToProps ? mapDispatchToProps(setState, props) : {};

      const ToReturn = Component as any;

      return <ToReturn {...stateProps} {...dispatchProps} {...props} />
    }

    function WithInterface(props: T) { return <Wrapped {...props}/>; }

    // Copy possible static variables.
    if(Object.keys(Component).length) {
      Object.keys(Component).forEach((key: string) => {
        (WithInterface as any)[key] = (Component as any)[key];
      })
    }

    return (WithInterface as any) as ScreenComponent<T>;
  }
}

export function connect<T>(
  mapStateToProps: (state: DorabankState, ownProps: T) => any,
  mapDispatchToProps: (setState: SetDorabankState, ownProps: T) => any,
  Component: ComponentType<any>
): ReactType<T> {

  const Wrapped: FC<any> = (props) => {
    const [state, setState] = useDorabankState()
    const stateProps = mapStateToProps(state, props);
    const dispatchProps = mapDispatchToProps(setState, props);

    return <Component {...stateProps} {...dispatchProps} {...props} />
  }

  const WithInterface: FC<T> = (props) => <Wrapped {...props}/>

  return WithInterface;
}

export default withStore;
