import DateHelper from "../helpers/date-helper";
import Account from "./account";

class AccountMovement {
  private _date: Date;
  private _description: string;
  private _ammount: number;
  private _code: string;
  private _accountBalance: number;
  private _accountId: number;
  private _account: Account;

  static _id = 0;

  constructor(movement: Partial<AccountMovement>) {
    this._date = movement.date || new Date();
    this._description = movement.description || '';
    this._ammount = movement.ammount || 0.00, 2;
    this._code = movement.code || 'nulo'
    this._accountBalance = movement.accountBalance || 0.00;
    this._accountId = movement.accountId || 0;
    this._account = movement.account || new Account({});
  }

  get dateInNormalFormat(): string {
    if(this.date)
      return DateHelper.convertToSpanishFullDate(this.date);
    else
      return DateHelper.convertToSpanishFullDate(new Date(Date.now()));
  }

  get date(): Date {
    return this._date;
  }

  set date(value: Date) {
    this._date = value;
  }

  get description(): string {
    return this._description;
  }

  set description(value: string) {
    this._description = value;
  }

  get ammount(): number {
    return this._round(this._ammount);
  }

  get code(): string {
    return this._code;
  }
  
  get accountBalance(): number {
    return this._round(this._accountBalance);
  }
  
  set ammount(value: number) {
    this._ammount = this._round(value);
  }
  
  set code(value: string) {
    this._code = value;
  }
  
  set accountBalance(value: number) {
    this._accountBalance = this._round(value);
  }

  get accountId(): number {
    return this._accountId;
  }

  get account(): Account {
    return this._account;
  }

  set accountId(value: number) {
    this._accountId = value;
  }

  set account(value: Account) {
    this._account = value;
  }

  static mockData(): AccountMovement[] {
    const data = [] as AccountMovement[];
    const currentDate = new Date(Date.now());
    for(let i = 0; i < 25; i++) {
      const actual = new Date(currentDate.setDate(currentDate.getDate() - i));
      data.push(new AccountMovement({
        date: actual,
        code: (i + (AccountMovement._id++) * 1000).toString(),
        ammount: (123565 * (i + 1.5)),
        accountBalance: 345678.32 * (i + 0.1),
        description: `This is something ${i + 1}`
      }));
    }

    return data;
  }

  private _round(value: number, decimalPlaces: number = 2): number {
    return Number(value.toFixed(decimalPlaces))
  }
}

export default AccountMovement;
